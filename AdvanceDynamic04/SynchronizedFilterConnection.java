/*
 * This class generated by com.mchange.v2.codegen.intfc.DelegatorGenerator
 * Mon Jan 13 15:11:16 IST 2025
 * DO NOT HAND EDIT!!!!
 */
package com.mchange.v2.sql.filter;

import java.lang.Class;
import java.lang.Object;
import java.lang.String;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.ShardingKey;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public abstract class SynchronizedFilterConnection implements Connection
{
	protected Connection inner;
	
	public SynchronizedFilterConnection(Connection inner)
	{ this.inner = inner; }
	
	public SynchronizedFilterConnection()
	{}
	
	public synchronized void setInner( Connection inner )
	{ this.inner = inner; }
	
	public synchronized Connection getInner()
	{ return inner; }
	
	public synchronized void setReadOnly(boolean a) throws SQLException
	{
		inner.setReadOnly(a);
	}
	
	public synchronized void close() throws SQLException
	{
		inner.close();
	}
	
	public synchronized boolean isReadOnly() throws SQLException
	{
		return inner.isReadOnly();
	}
	
	public synchronized void abort(Executor a) throws SQLException
	{
		inner.abort(a);
	}
	
	public synchronized Statement createStatement(int a, int b) throws SQLException
	{
		return inner.createStatement(a, b);
	}
	
	public synchronized Statement createStatement(int a, int b, int c) throws SQLException
	{
		return inner.createStatement(a, b, c);
	}
	
	public synchronized Statement createStatement() throws SQLException
	{
		return inner.createStatement();
	}
	
	public synchronized void commit() throws SQLException
	{
		inner.commit();
	}
	
	public synchronized void rollback(Savepoint a) throws SQLException
	{
		inner.rollback(a);
	}
	
	public synchronized void rollback() throws SQLException
	{
		inner.rollback();
	}
	
	public synchronized void setHoldability(int a) throws SQLException
	{
		inner.setHoldability(a);
	}
	
	public synchronized Clob createClob() throws SQLException
	{
		return inner.createClob();
	}
	
	public synchronized Blob createBlob() throws SQLException
	{
		return inner.createBlob();
	}
	
	public synchronized void setAutoCommit(boolean a) throws SQLException
	{
		inner.setAutoCommit(a);
	}
	
	public synchronized Map getTypeMap() throws SQLException
	{
		return inner.getTypeMap();
	}
	
	public synchronized CallableStatement prepareCall(String a, int b, int c) throws SQLException
	{
		return inner.prepareCall(a, b, c);
	}
	
	public synchronized CallableStatement prepareCall(String a, int b, int c, int d) throws SQLException
	{
		return inner.prepareCall(a, b, c, d);
	}
	
	public synchronized CallableStatement prepareCall(String a) throws SQLException
	{
		return inner.prepareCall(a);
	}
	
	public synchronized Savepoint setSavepoint(String a) throws SQLException
	{
		return inner.setSavepoint(a);
	}
	
	public synchronized Savepoint setSavepoint() throws SQLException
	{
		return inner.setSavepoint();
	}
	
	public synchronized void releaseSavepoint(Savepoint a) throws SQLException
	{
		inner.releaseSavepoint(a);
	}
	
	public synchronized NClob createNClob() throws SQLException
	{
		return inner.createNClob();
	}
	
	public synchronized boolean isValid(int a) throws SQLException
	{
		return inner.isValid(a);
	}
	
	public synchronized boolean getAutoCommit() throws SQLException
	{
		return inner.getAutoCommit();
	}
	
	public synchronized Properties getClientInfo() throws SQLException
	{
		return inner.getClientInfo();
	}
	
	public synchronized String getClientInfo(String a) throws SQLException
	{
		return inner.getClientInfo(a);
	}
	
	public synchronized int getHoldability() throws SQLException
	{
		return inner.getHoldability();
	}
	
	public synchronized SQLXML createSQLXML() throws SQLException
	{
		return inner.createSQLXML();
	}
	
	public synchronized Array createArrayOf(String a, Object[] b) throws SQLException
	{
		return inner.createArrayOf(a, b);
	}
	
	public synchronized Struct createStruct(String a, Object[] b) throws SQLException
	{
		return inner.createStruct(a, b);
	}
	
	public synchronized DatabaseMetaData getMetaData() throws SQLException
	{
		return inner.getMetaData();
	}
	
	public synchronized void setTypeMap(Map a) throws SQLException
	{
		inner.setTypeMap(a);
	}
	
	public synchronized void setClientInfo(String a, String b) throws SQLClientInfoException
	{
		inner.setClientInfo(a, b);
	}
	
	public synchronized void setClientInfo(Properties a) throws SQLClientInfoException
	{
		inner.setClientInfo(a);
	}
	
	public synchronized String nativeSQL(String a) throws SQLException
	{
		return inner.nativeSQL(a);
	}
	
	public synchronized void setSchema(String a) throws SQLException
	{
		inner.setSchema(a);
	}
	
	public synchronized String getSchema() throws SQLException
	{
		return inner.getSchema();
	}
	
	public synchronized void setCatalog(String a) throws SQLException
	{
		inner.setCatalog(a);
	}
	
	public synchronized PreparedStatement prepareStatement(String a) throws SQLException
	{
		return inner.prepareStatement(a);
	}
	
	public synchronized PreparedStatement prepareStatement(String a, int b, int c) throws SQLException
	{
		return inner.prepareStatement(a, b, c);
	}
	
	public synchronized PreparedStatement prepareStatement(String a, int b, int c, int d) throws SQLException
	{
		return inner.prepareStatement(a, b, c, d);
	}
	
	public synchronized PreparedStatement prepareStatement(String a, int b) throws SQLException
	{
		return inner.prepareStatement(a, b);
	}
	
	public synchronized PreparedStatement prepareStatement(String a, String[] b) throws SQLException
	{
		return inner.prepareStatement(a, b);
	}
	
	public synchronized PreparedStatement prepareStatement(String a, int[] b) throws SQLException
	{
		return inner.prepareStatement(a, b);
	}
	
	public synchronized boolean isClosed() throws SQLException
	{
		return inner.isClosed();
	}
	
	public synchronized String getCatalog() throws SQLException
	{
		return inner.getCatalog();
	}
	
	public synchronized SQLWarning getWarnings() throws SQLException
	{
		return inner.getWarnings();
	}
	
	public synchronized void clearWarnings() throws SQLException
	{
		inner.clearWarnings();
	}
	
	public synchronized int getNetworkTimeout() throws SQLException
	{
		return inner.getNetworkTimeout();
	}
	
	public synchronized void setShardingKey(ShardingKey a) throws SQLException
	{
		inner.setShardingKey(a);
	}
	
	public synchronized void setShardingKey(ShardingKey a, ShardingKey b) throws SQLException
	{
		inner.setShardingKey(a, b);
	}
	
	public synchronized void setNetworkTimeout(Executor a, int b) throws SQLException
	{
		inner.setNetworkTimeout(a, b);
	}
	
	public synchronized void beginRequest() throws SQLException
	{
		inner.beginRequest();
	}
	
	public synchronized void endRequest() throws SQLException
	{
		inner.endRequest();
	}
	
	public synchronized boolean setShardingKeyIfValid(ShardingKey a, ShardingKey b, int c) throws SQLException
	{
		return inner.setShardingKeyIfValid(a, b, c);
	}
	
	public synchronized boolean setShardingKeyIfValid(ShardingKey a, int b) throws SQLException
	{
		return inner.setShardingKeyIfValid(a, b);
	}
	
	public synchronized int getTransactionIsolation() throws SQLException
	{
		return inner.getTransactionIsolation();
	}
	
	public synchronized void setTransactionIsolation(int a) throws SQLException
	{
		inner.setTransactionIsolation(a);
	}
	
	public synchronized Object unwrap(Class a) throws SQLException
	{
		return inner.unwrap(a);
	}
	
	public synchronized boolean isWrapperFor(Class a) throws SQLException
	{
		return inner.isWrapperFor(a);
	}
	
}
